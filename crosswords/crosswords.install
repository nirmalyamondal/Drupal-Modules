<?php

/**
 * @file
 * Install file for crosswords.
 */
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_install().
 *
 * We don't want users to be able to delete our locked_content_type content
 * type. So therefore we have to tell Drupal that this is the case. This
 * can't be done in the content type's configuration YAML file, so we have to
 * do it in code, here.
 *
 * @ingroup crosswords
 */
function crosswords_install() {
  // Do not allow the locked content type to be deleted.
  $locked = Drupal::state()->get('node.type.locked');
  if ($locked['crosswords'] !== 'crosswords') {
    $locked['crosswords'] = 'crosswords';
    Drupal::state()->set('node.type.locked', $locked);
  }
}

/**
 * Implements hook_uninstall().
 *
 * Our content types will live on in the Drupal installation, even after this
 * module is uninstalled. This is a good thing, since it allows the user to
 * make decisions about their fate. Therefore we should give the user the
 * option of deleting them.
 *
 * Since we told Drupal that our crosswords is locked, we now have
 * to tell it to unlock.
 *
 * @ingroup crosswords
 */
function crosswords_uninstall() {
  // Allow crosswords to be deleted.
  $locked = Drupal::state()->get('node.type.locked');
  unset($locked['crosswords']);
  Drupal::state()->set('node.type.locked', $locked);
  $query = \Drupal::entityQuery('node')->condition('type', 'crosswords');
  $nids = $query->execute();
  foreach ($nids as $nid) {
    \Drupal\node\Entity\Node::load($nid)->delete();
  }
  $crosswordsNodeType = NodeType::load('crosswords');
  $crosswordsNodeType->delete();
  drupal_flush_all_caches();
}
